class Solution {
    public int largestRectangleArea(int[] heights) {
        
        int maxAns = Integer.MIN_VALUE;
        int ps [] = prevSmaller(heights);
        int ns [] = nextSmaller(heights);
        
        for(int i = 0;i<heights.length;i++)
        {
            int curr = (ns[i] - ps[i] - 1) * heights[i];
            maxAns = Math.max(maxAns,curr);
        }   
        return maxAns;
    }
    
    int[] prevSmaller(int [] height){
        int ps[] = new int [height.length];
        Stack<Integer> s = new Stack<Integer>();
        for(int i = 0;i<height.length;i++){
            while(!s.isEmpty() && height[i] <= height[s.peek()] ){
                s.pop();
            }
            if(s.isEmpty()){
                ps[i] = -1;
            }else{
                ps[i] = s.peek();
            }
            s.push(i);
        }
        return ps;
    }
    
    int[] nextSmaller(int [] height){
        int ns[] = new int [height.length];
        Stack<Integer> s = new Stack<Integer>();
        for(int i = height.length - 1;i>=0;i--){
            while(!s.isEmpty() &&  height[i] <=height[s.peek()]){
                s.pop();
            }
            if(s.isEmpty()){
                ns[i] = height.length;
            }else{
                ns[i] = s.peek();
            }
            s.push(i);
        }
        return ns;
    }
}